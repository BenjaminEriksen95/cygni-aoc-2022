/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.util.Arrays;

public class App {


    public static Integer getSolutionPart1(String graph) {
        return 1;
    }

    public static Integer getSolutionPart2(String graph) {
        return 1;
    }

    public static void main(String[] args) throws IOException {
        System.out.println("java");
        var graph = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(getSolutionPart2(graph));
        else
            System.out.println(getSolutionPart1(graph));
    }

    private static String parseInput(String filename) {
        return "";
    }



    public static boolean isOrdered(String s1, String s2) {

/*        if (!s1.startsWith("[")) {
            isOrdered("[" + s1 + "]", s2);
        }

        if (!s2.startsWith("[")) {
            isOrdered(s1, "[" + s2 + "]");
        }*/

        System.out.println("isOrdered("+ s1+","+s2+")");
        if (s1.equals("[]")) {
            return s2.equals("[]");
        }

        if (s2.equals("[]")) {
            return true;
        }

        if (s1.startsWith("[[") && s1.endsWith("]]")) {
            if (s2.startsWith("[[") && s2.endsWith("]]")) {
                return isOrdered(s1.substring(1, s1.length() - 1),
                    s2.substring(1, s2.length() - 1));
            } else {
                return isOrdered(s1.substring(1, s1.length() - 1), s2);

            }
        }
        else if (s2.startsWith("[[") && s2.endsWith("]]")) {
                return isOrdered(s1, s2.substring(1, s2.length()-1));
        }

        if (hasNoSubLists(s1) && hasNoSubLists(s2)) {
            var left = Arrays.stream(s1.substring(1, s1.length()-1).split(",")).map(Integer::parseInt).toList();
            var right = Arrays.stream(s2.substring(1, s2.length()-1).split(",")).map(Integer::parseInt).toList();
/*            if (right.size() > left.size())
            {
                System.out.println(s1+ " " + s2);
                return false;
            }*/


            for (int i = 0; i < right.size(); i++) {
                try {
                if (left.get(i) < right.get(i)) return true;
                if (left.get(i) > right.get(i)) return false;
                } catch (ArrayIndexOutOfBoundsException e) {
                    return true;
                }
            }
            if (left.size() > right.size()) return false;
            /*for (int i = 0; i < left.size(); i++) {
                try {
                    if (left.get(i) > right.get(i))
                        return false;
                } catch (ArrayIndexOutOfBoundsException e) {
                    return false;
                }
            }*/
            return true;
        } else {
            var l1 = s1.split(",",2);
            var l2 = s2.split(",",2);

            if (isOrdered(prune(l1[0]), prune(l2[0]))) {
                if (l2.length < l1.length) return false;
                if (l1.length == 1) return true;
                return isOrdered(prune(l1[1]), prune(l2[1]));
            }
        }
        return false;
    }

    private static String prune(String s) {
        if (s.startsWith("[[") && !s.endsWith("]]")) s = s.substring(1);
        if (s.endsWith("]]") && !s.startsWith("[[")) s = s.substring(0,s.length()-1);

        var imbalance = (int) (s.chars().filter(ch -> ch == ']').count() - s.chars().filter(ch -> ch == '[').count());

        if (imbalance > 0) {
            for (int i = imbalance; i > 0; i--) {
                s = "[" + s;
            }
        } else {
            for (int i = imbalance; i < 0; i++) {
                s =  s + "]";
            }
        }
        return s;
    }

    private static boolean hasNoSubLists(String string) {
        return string.lastIndexOf("[") == 0 && string.indexOf("]") == string.length()-1;
    }

    public static String recursiveSplit(String line) {
        if (line.equals("[]")) return "";
        if (line.startsWith("[") && line.endsWith("]")) return recursiveSplit(line.substring(1,line.length()-1));
        return line;
    }

}
